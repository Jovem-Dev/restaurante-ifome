{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects'; // Login Redux States\n\nimport { LOGIN_USER, LOGOUT_USER } from './actionTypes';\nimport { loginSuccess, logoutUserSuccess, apiError } from './actions'; //Include Both Helper File with needed methods\n\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\nimport { postFakeLogin, postJwtLogin } from '../../../helpers/fakebackend_helper';\nconst fireBaseBackend = getFirebaseBackend();\n\nfunction* loginUser({\n  payload: {\n    user,\n    history\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.loginUser, user.email, user.password);\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"jwt\") {\n      const response = yield call(postJwtLogin, '/post-jwt-login', {\n        email: user.email,\n        password: user.password\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    } else if (process.env.REACT_APP_DEFAULTAUTH === \"fake\") {\n      const response = yield call(postFakeLogin, '/post-fake-login', {\n        email: user.email,\n        password: user.password\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginSuccess(response));\n    }\n\n    history.push('/dashboard');\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser({\n  payload: {\n    history\n  }\n}) {\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === 'firebase') {\n      const response = yield call(fireBaseBackend.logout);\n      yield put(logoutUserSuccess(response));\n    }\n\n    history.push('/login');\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(LOGIN_USER, loginUser);\n}\nexport function* watchUserLogout() {\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nfunction* authSaga() {\n  yield all([fork(watchUserLogin), fork(watchUserLogout)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["D:/Desenvolvimento/# Repositorios Git Hub/Para Commitar/restaurante-ifome/src/store/auth/login/saga.js"],"names":["takeEvery","fork","put","all","call","LOGIN_USER","LOGOUT_USER","loginSuccess","logoutUserSuccess","apiError","getFirebaseBackend","postFakeLogin","postJwtLogin","fireBaseBackend","loginUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","email","password","localStorage","setItem","JSON","stringify","push","error","logoutUser","removeItem","logout","watchUserLogin","watchUserLogout","authSaga"],"mappings":"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","sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n// Login Redux States\r\nimport { LOGIN_USER, LOGOUT_USER } from './actionTypes';\r\nimport { loginSuccess, logoutUserSuccess, apiError } from './actions';\r\n\r\n//Include Both Helper File with needed methods\r\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\r\nimport { postFakeLogin,postJwtLogin  } from '../../../helpers/fakebackend_helper';\r\n\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\nfunction* loginUser({ payload: { user, history } }) {\r\n    try {\r\n          if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\")\r\n          {\r\n             const response = yield call(fireBaseBackend.loginUser, user.email, user.password);\r\n             yield put(loginSuccess(response));\r\n          }\r\n          else if(process.env.REACT_APP_DEFAULTAUTH === \"jwt\")\r\n          {  \r\n             const response = yield call(postJwtLogin, '/post-jwt-login', {email: user.email, password: user.password});\r\n             localStorage.setItem(\"authUser\", JSON.stringify(response));\r\n             yield put(loginSuccess(response));\r\n          }\r\n          else if(process.env.REACT_APP_DEFAULTAUTH === \"fake\")\r\n          {\r\n             const response = yield call(postFakeLogin, '/post-fake-login', {email: user.email, password: user.password});\r\n             localStorage.setItem(\"authUser\", JSON.stringify(response));\r\n             yield put(loginSuccess(response));\r\n          }\r\n         history.push('/dashboard');\r\n          \r\n    } catch (error) {\r\n        yield put(apiError(error));\r\n    }\r\n}\r\n\r\nfunction* logoutUser({ payload: { history } }) {\r\n    try {\r\n         localStorage.removeItem(\"authUser\");\r\n\r\n         if(process.env.REACT_APP_DEFAULTAUTH === 'firebase')\r\n         {\r\n           const response = yield call(fireBaseBackend.logout);\r\n           yield put(logoutUserSuccess(response));\r\n         }\r\n        history.push('/login');\r\n    } catch (error) {\r\n        yield put(apiError(error));\r\n    }\r\n}\r\n\r\n\r\nexport function* watchUserLogin() {\r\n    yield takeEvery(LOGIN_USER, loginUser)\r\n}\r\n\r\nexport function* watchUserLogout() {\r\n    yield takeEvery(LOGOUT_USER, logoutUser)\r\n}\r\n\r\nfunction* authSaga() {\r\n    yield all([\r\n        fork(watchUserLogin),\r\n        fork(watchUserLogout),\r\n    ]);\r\n}\r\n\r\nexport default authSaga;"]},"metadata":{},"sourceType":"module"}